{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactWorkspace\\\\hotel-sys\\\\src\\\\components\\\\frontOffice\\\\rooms\\\\RoomList.js\";\nimport React from 'react';\nimport MaterialTable from 'material-table';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { useSelector, connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { updateRoomType } from '../../../redux/actions/frontOfficeActions/RoomTypeActions';\nimport { insertRoomType } from '../../../redux/actions/frontOfficeActions/RoomTypeActions';\nimport { deleteRoomType } from '../../../redux/actions/frontOfficeActions/RoomTypeActions';\n\nfunction RoomList(props) {\n  const {\n    useState\n  } = React;\n  const [columns, setColumns] = useState([{\n    title: 'Room Id',\n    field: 'id'\n  }, {\n    title: 'Room No',\n    field: 'roomNo'\n  }, {\n    title: 'Location',\n    field: 'location'\n  }, {\n    title: 'Maintainance needed',\n    field: 'maintainanceRequired'\n  }]);\n  const rooms = useSelector(state => state.firestore.ordered.room);\n  const data = rooms ? rooms.map(room => ({ ...room\n  })) : null;\n  const table = data ? /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"RoomList Preview\",\n    columns: columns,\n    data: data,\n    editable: {\n      onRowAdd: newData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          //setData([...data, newData]);\n          props.insertRoomType(newData);\n          resolve();\n        }, 1000);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataUpdate = [...data];\n          const index = oldData.tableData.id;\n          dataUpdate[index] = newData; //setData([...dataUpdate]);\n\n          console.log(newData, oldData);\n          props.updateRoomType(newData);\n          resolve();\n        }, 1000);\n      }),\n      onRowDelete: oldData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataDelete = [...data];\n          const index = oldData.tableData.id;\n          dataDelete.splice(index, 1); //setData([...dataDelete]);\n\n          console.log(oldData);\n          props.deleteRoomType(oldData.id);\n          resolve();\n        }, 1000);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }, \"Loading\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, table);\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {//       updateRoomType: (payload) => dispatch(updateRoomType(payload)),\n    //       insertRoomType: (payload) => dispatch(insertRoomType(payload)),\n    //       deleteRoomType: (roomId) => dispatch(deleteRoomType(roomId))\n  };\n};\n\nexport default compose(connect(null, mapDispatchToProps), firestoreConnect([{\n  collection: 'room'\n}]))(RoomList);","map":{"version":3,"sources":["D:/ReactWorkspace/hotel-sys/src/components/frontOffice/rooms/RoomList.js"],"names":["React","MaterialTable","firestoreConnect","useSelector","connect","compose","updateRoomType","insertRoomType","deleteRoomType","RoomList","props","useState","columns","setColumns","title","field","rooms","state","firestore","ordered","room","data","map","table","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","dataUpdate","index","tableData","id","console","log","onRowDelete","dataDelete","splice","mapDispatchToProps","dispatch","collection"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { useSelector, connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nimport {updateRoomType} from '../../../redux/actions/frontOfficeActions/RoomTypeActions'\r\nimport {insertRoomType} from '../../../redux/actions/frontOfficeActions/RoomTypeActions'\r\nimport {deleteRoomType} from '../../../redux/actions/frontOfficeActions/RoomTypeActions'\r\n\r\n function RoomList(props) {\r\n \r\n    const { useState } = React;\r\n    const [columns, setColumns] = useState([\r\n      { title: 'Room Id', field: 'id' },\r\n      { title: 'Room No', field: 'roomNo' },\r\n      { title: 'Location', field: 'location'},\r\n      {\r\n        title: 'Maintainance needed',\r\n        field: 'maintainanceRequired',\r\n      },\r\n    ]); \r\n    const rooms = useSelector(state => state.firestore.ordered.room)\r\n    const data = rooms ? (rooms.map(room => ({...room}))) : (null)\r\n    const table = data ? (\r\n        <MaterialTable\r\n        title=\"RoomList Preview\"\r\n        columns={columns}\r\n        data={data}\r\n        editable={{\r\n          onRowAdd: newData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                //setData([...data, newData]);\r\n                props.insertRoomType(newData);\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                //setData([...dataUpdate]);\r\n                console.log(newData,oldData)\r\n                props.updateRoomType(newData)\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                //setData([...dataDelete]);\r\n                console.log(oldData)\r\n                props.deleteRoomType(oldData.id)\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n      />\r\n    ) : (<div>Loading</div>)\r\n\r\n\r\n  \r\n\r\n  \r\n    return(\r\n        <div>\r\n             {table}\r\n        </div>\r\n       \r\n        )\r\n  }\r\n \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n //       updateRoomType: (payload) => dispatch(updateRoomType(payload)),\r\n //       insertRoomType: (payload) => dispatch(insertRoomType(payload)),\r\n //       deleteRoomType: (roomId) => dispatch(deleteRoomType(roomId))\r\n\r\n    }\r\n}\r\n  export default compose(connect(null,mapDispatchToProps),firestoreConnect([\r\n    {collection: 'room'}\r\n  ])) (RoomList)"]},"metadata":{},"sourceType":"module"}