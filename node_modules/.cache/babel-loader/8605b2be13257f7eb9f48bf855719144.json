{"ast":null,"code":"var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n/**\r\n * This method is like `_.difference` except that it accepts `comparator`\r\n * which is invoked to compare elements of `array` to `values`. The order and\r\n * references of result values are determined by the first array. The comparator\r\n * is invoked with two arguments: (arrVal, othVal).\r\n *\r\n * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {Array} array The array to inspect.\r\n * @param {...Array} [values] The values to exclude.\r\n * @param {Function} [comparator] The comparator invoked per element.\r\n * @returns {Array} Returns the new array of filtered values.\r\n * @example\r\n *\r\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\r\n *\r\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\r\n * // => [{ 'x': 2, 'y': 1 }]\r\n */\n\n\nvar differenceWith = baseRest(function (array, values) {\n  var comparator = last(values);\n\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n\n  return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];\n});\nmodule.exports = differenceWith;","map":{"version":3,"sources":["C:/ReactWorkspace/hotel-sys/hotel-sys/node_modules/lodash/differenceWith.js"],"names":["baseDifference","require","baseFlatten","baseRest","isArrayLikeObject","last","differenceWith","array","values","comparator","undefined","module","exports"],"mappings":"AAAA,IAAIA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA5B;AAAA,IACIC,WAAW,GAAGD,OAAO,CAAC,gBAAD,CADzB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAFtB;AAAA,IAGIG,iBAAiB,GAAGH,OAAO,CAAC,qBAAD,CAH/B;AAAA,IAIII,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAJlB;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIK,cAAc,GAAGH,QAAQ,CAAC,UAASI,KAAT,EAAgBC,MAAhB,EAAwB;AACpD,MAAIC,UAAU,GAAGJ,IAAI,CAACG,MAAD,CAArB;;AACA,MAAIJ,iBAAiB,CAACK,UAAD,CAArB,EAAmC;AACjCA,IAAAA,UAAU,GAAGC,SAAb;AACD;;AACD,SAAON,iBAAiB,CAACG,KAAD,CAAjB,GACHP,cAAc,CAACO,KAAD,EAAQL,WAAW,CAACM,MAAD,EAAS,CAAT,EAAYJ,iBAAZ,EAA+B,IAA/B,CAAnB,EAAyDM,SAAzD,EAAoED,UAApE,CADX,GAEH,EAFJ;AAGD,CAR4B,CAA7B;AAUAE,MAAM,CAACC,OAAP,GAAiBN,cAAjB","sourcesContent":["var baseDifference = require('./_baseDifference'),\r\n    baseFlatten = require('./_baseFlatten'),\r\n    baseRest = require('./_baseRest'),\r\n    isArrayLikeObject = require('./isArrayLikeObject'),\r\n    last = require('./last');\r\n\r\n/**\r\n * This method is like `_.difference` except that it accepts `comparator`\r\n * which is invoked to compare elements of `array` to `values`. The order and\r\n * references of result values are determined by the first array. The comparator\r\n * is invoked with two arguments: (arrVal, othVal).\r\n *\r\n * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {Array} array The array to inspect.\r\n * @param {...Array} [values] The values to exclude.\r\n * @param {Function} [comparator] The comparator invoked per element.\r\n * @returns {Array} Returns the new array of filtered values.\r\n * @example\r\n *\r\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\r\n *\r\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\r\n * // => [{ 'x': 2, 'y': 1 }]\r\n */\r\nvar differenceWith = baseRest(function(array, values) {\r\n  var comparator = last(values);\r\n  if (isArrayLikeObject(comparator)) {\r\n    comparator = undefined;\r\n  }\r\n  return isArrayLikeObject(array)\r\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\r\n    : [];\r\n});\r\n\r\nmodule.exports = differenceWith;\r\n"]},"metadata":{},"sourceType":"script"}