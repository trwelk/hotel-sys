{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactWorkspace\\\\hotel-sys\\\\src\\\\components\\\\frontOffice\\\\rooms\\\\Editable.js\";\nimport React from 'react';\nimport MaterialTable from 'material-table';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { useSelector, connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport AppBar from '@material-ui/core/AppBar';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { updateRoomType } from '../../../redux/actions/frontOfficeActions/RoomTypeActions';\nimport { insertRoomType } from '../../../redux/actions/frontOfficeActions/RoomTypeActions';\nimport { deleteRoomType } from '../../../redux/actions/frontOfficeActions/RoomTypeActions';\n\nfunction Editable(props) {\n  const lightColor = 'rgba(255, 255, 255, 0.7)';\n\n  const styles = theme => ({\n    secondaryBar: {\n      zIndex: 0\n    },\n    menuButton: {\n      marginLeft: -theme.spacing(1)\n    },\n    iconButtonAvatar: {\n      padding: 4\n    },\n    link: {\n      textDecoration: 'none',\n      color: lightColor,\n      '&:hover': {\n        color: theme.palette.common.white\n      }\n    },\n    button: {\n      borderColor: lightColor\n    }\n  });\n\n  const {\n    classes,\n    onDrawerToggle\n  } = props;\n  const {\n    useState\n  } = React;\n  const [columns, setColumns] = useState([{\n    title: 'ID',\n    field: 'id'\n  }, {\n    title: 'Name',\n    field: 'name'\n  }, {\n    title: 'Brief',\n    field: 'brief'\n  }, {\n    title: 'Description',\n    field: 'descriptions'\n  }]);\n  const room = useSelector(state => state.firestore.ordered.roomtype);\n  const data = room ? room.map(room => ({ ...room\n  })) : null;\n  const table = data ? /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Editable Preview\",\n    columns: columns,\n    data: data,\n    editable: {\n      onRowAdd: newData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          //setData([...data, newData]);\n          props.insertRoomType(newData);\n          resolve();\n        }, 1000);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataUpdate = [...data];\n          const index = oldData.tableData.id;\n          dataUpdate[index] = newData; //setData([...dataUpdate]);\n\n          console.log(newData, oldData);\n          props.updateRoomType(newData);\n          resolve();\n        }, 1000);\n      }),\n      onRowDelete: oldData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataDelete = [...data];\n          const index = oldData.tableData.id;\n          dataDelete.splice(index, 1); //setData([...dataDelete]);\n\n          console.log(oldData);\n          props.deleteRoomType(oldData.id);\n          resolve();\n        }, 1000);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 10\n    }\n  }, \"Loading\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    component: \"div\",\n    className: classes.secondaryBar,\n    color: \"primary\",\n    position: \"static\",\n    elevation: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: 0,\n    textColor: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tab, {\n    textColor: \"inherit\",\n    label: \"Rooms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tab, {\n    textColor: \"inherit\",\n    label: \"Some stuff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tab, {\n    textColor: \"inherit\",\n    label: \"Some more stuff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tab, {\n    textColor: \"inherit\",\n    label: \"Some other stuff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }))), table);\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateRoomType: payload => dispatch(updateRoomType(payload)),\n    insertRoomType: payload => dispatch(insertRoomType(payload)),\n    deleteRoomType: roomId => dispatch(deleteRoomType(roomId))\n  };\n};\n\nEditable.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onDrawerToggle: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(compose(connect(null, mapDispatchToProps), firestoreConnect([{\n  collection: 'roomtype'\n}]))(Editable));","map":{"version":3,"sources":["D:/ReactWorkspace/hotel-sys/src/components/frontOffice/rooms/Editable.js"],"names":["React","MaterialTable","firestoreConnect","useSelector","connect","compose","Tab","Tabs","AppBar","withStyles","PropTypes","updateRoomType","insertRoomType","deleteRoomType","Editable","props","lightColor","styles","theme","secondaryBar","zIndex","menuButton","marginLeft","spacing","iconButtonAvatar","padding","link","textDecoration","color","palette","common","white","button","borderColor","classes","onDrawerToggle","useState","columns","setColumns","title","field","room","state","firestore","ordered","roomtype","data","map","table","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","dataUpdate","index","tableData","id","console","log","onRowDelete","dataDelete","splice","mapDispatchToProps","dispatch","payload","roomId","propTypes","object","isRequired","func","collection"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { useSelector, connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\n\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n\r\nimport {updateRoomType} from '../../../redux/actions/frontOfficeActions/RoomTypeActions'\r\nimport {insertRoomType} from '../../../redux/actions/frontOfficeActions/RoomTypeActions'\r\nimport {deleteRoomType} from '../../../redux/actions/frontOfficeActions/RoomTypeActions'\r\n\r\n function Editable(props) {\r\n \r\n  const lightColor = 'rgba(255, 255, 255, 0.7)';\r\n\r\n  const styles = (theme) => ({\r\n    secondaryBar: {\r\n      zIndex: 0,\r\n    },\r\n    menuButton: {\r\n      marginLeft: -theme.spacing(1),\r\n    },\r\n    iconButtonAvatar: {\r\n      padding: 4,\r\n    },\r\n    link: {\r\n      textDecoration: 'none',\r\n      color: lightColor,\r\n      '&:hover': {\r\n        color: theme.palette.common.white,\r\n      },\r\n    },\r\n    button: {\r\n      borderColor: lightColor,\r\n    },\r\n  });\r\n  \r\n    const { classes, onDrawerToggle } = props;\r\n    const { useState } = React;\r\n    const [columns, setColumns] = useState([\r\n      { title: 'ID', field: 'id' },\r\n      { title: 'Name', field: 'name' },\r\n      { title: 'Brief', field: 'brief'},\r\n      {\r\n        title: 'Description',\r\n        field: 'descriptions',\r\n      },\r\n    ]); \r\n    const room = useSelector(state => state.firestore.ordered.roomtype)\r\n    const data = room ? (room.map(room => ({...room}))) : (null)\r\n    const table = data ? (\r\n        <MaterialTable\r\n        title=\"Editable Preview\"\r\n        columns={columns}\r\n        data={data}\r\n        editable={{\r\n          onRowAdd: newData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                //setData([...data, newData]);\r\n                props.insertRoomType(newData);\r\n                \r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                //setData([...dataUpdate]);\r\n                console.log(newData,oldData)\r\n                props.updateRoomType(newData)\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                //setData([...dataDelete]);\r\n                console.log(oldData)\r\n                props.deleteRoomType(oldData.id)\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n      />\r\n    ) : (<div>Loading</div>)\r\n\r\n\r\n  \r\n\r\n  \r\n    return(\r\n        <div>\r\n                  <AppBar\r\n        component=\"div\"\r\n        className={classes.secondaryBar}\r\n        color=\"primary\"\r\n        position=\"static\"\r\n        elevation={0}\r\n      >\r\n        <Tabs value={0} textColor=\"inherit\">\r\n          <Tab textColor=\"inherit\" label=\"Rooms\" />\r\n          <Tab textColor=\"inherit\" label=\"Some stuff\" />\r\n          <Tab textColor=\"inherit\" label=\"Some more stuff\" />\r\n          <Tab textColor=\"inherit\" label=\"Some other stuff\" />\r\n        </Tabs>\r\n      </AppBar> \r\n             {table}\r\n        </div>\r\n       \r\n        )\r\n  }\r\n \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateRoomType: (payload) => dispatch(updateRoomType(payload)),\r\n        insertRoomType: (payload) => dispatch(insertRoomType(payload)),\r\n        deleteRoomType: (roomId) => dispatch(deleteRoomType(roomId))\r\n\r\n\r\n    }\r\n}\r\nEditable.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onDrawerToggle: PropTypes.func.isRequired,\r\n};\r\n\r\n  export default withStyles(styles)(compose(connect(null,mapDispatchToProps),firestoreConnect([\r\n    {collection: 'roomtype'}\r\n  ])) (Editable))"]},"metadata":{},"sourceType":"module"}