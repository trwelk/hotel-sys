{"ast":null,"code":"var baseFlatten = require('./_baseFlatten'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n/**\r\n * This method is like `_.union` except that it accepts `iteratee` which is\r\n * invoked for each element of each `arrays` to generate the criterion by\r\n * which uniqueness is computed. Result values are chosen from the first\r\n * array in which the value occurs. The iteratee is invoked with one argument:\r\n * (value).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to inspect.\r\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n * @returns {Array} Returns the new array of combined values.\r\n * @example\r\n *\r\n * _.unionBy([2.1], [1.2, 2.3], Math.floor);\r\n * // => [2.1, 1.2]\r\n *\r\n * // The `_.property` iteratee shorthand.\r\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\r\n * // => [{ 'x': 1 }, { 'x': 2 }]\r\n */\n\n\nvar unionBy = baseRest(function (arrays) {\n  var iteratee = last(arrays);\n\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));\n});\nmodule.exports = unionBy;","map":{"version":3,"sources":["C:/ReactWorkspace/hotel-sys/hotel-sys/node_modules/lodash/unionBy.js"],"names":["baseFlatten","require","baseIteratee","baseRest","baseUniq","isArrayLikeObject","last","unionBy","arrays","iteratee","undefined","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;AAAA,IACIC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAD1B;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAFtB;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAHtB;AAAA,IAIII,iBAAiB,GAAGJ,OAAO,CAAC,qBAAD,CAJ/B;AAAA,IAKIK,IAAI,GAAGL,OAAO,CAAC,QAAD,CALlB;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIM,OAAO,GAAGJ,QAAQ,CAAC,UAASK,MAAT,EAAiB;AACtC,MAAIC,QAAQ,GAAGH,IAAI,CAACE,MAAD,CAAnB;;AACA,MAAIH,iBAAiB,CAACI,QAAD,CAArB,EAAiC;AAC/BA,IAAAA,QAAQ,GAAGC,SAAX;AACD;;AACD,SAAON,QAAQ,CAACJ,WAAW,CAACQ,MAAD,EAAS,CAAT,EAAYH,iBAAZ,EAA+B,IAA/B,CAAZ,EAAkDH,YAAY,CAACO,QAAD,EAAW,CAAX,CAA9D,CAAf;AACD,CANqB,CAAtB;AAQAE,MAAM,CAACC,OAAP,GAAiBL,OAAjB","sourcesContent":["var baseFlatten = require('./_baseFlatten'),\r\n    baseIteratee = require('./_baseIteratee'),\r\n    baseRest = require('./_baseRest'),\r\n    baseUniq = require('./_baseUniq'),\r\n    isArrayLikeObject = require('./isArrayLikeObject'),\r\n    last = require('./last');\r\n\r\n/**\r\n * This method is like `_.union` except that it accepts `iteratee` which is\r\n * invoked for each element of each `arrays` to generate the criterion by\r\n * which uniqueness is computed. Result values are chosen from the first\r\n * array in which the value occurs. The iteratee is invoked with one argument:\r\n * (value).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to inspect.\r\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n * @returns {Array} Returns the new array of combined values.\r\n * @example\r\n *\r\n * _.unionBy([2.1], [1.2, 2.3], Math.floor);\r\n * // => [2.1, 1.2]\r\n *\r\n * // The `_.property` iteratee shorthand.\r\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\r\n * // => [{ 'x': 1 }, { 'x': 2 }]\r\n */\r\nvar unionBy = baseRest(function(arrays) {\r\n  var iteratee = last(arrays);\r\n  if (isArrayLikeObject(iteratee)) {\r\n    iteratee = undefined;\r\n  }\r\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));\r\n});\r\n\r\nmodule.exports = unionBy;\r\n"]},"metadata":{},"sourceType":"script"}